local Maid = loadstring(game:HttpGet("https://raw.githubusercontent.com/AccountBurner/Utility/refs/heads/main/Maid.lua"))();

local OverlaySystem = {};
local OverlayMaid = Maid.new();
local OverlayGui = nil;
local OverlayLabels = {};
local Camera = workspace.CurrentCamera;

local function GetOptimalSizes()
    local viewport = Camera.ViewportSize;
    local isMobile = game:GetService("UserInputService").TouchEnabled and not game:GetService("UserInputService").KeyboardEnabled;
    
    local baseWidth = isMobile and math.min(viewport.X * 0.9, 400) or math.min(viewport.X * 0.4, 500);
    local baseHeight = isMobile and math.min(viewport.Y * 0.7, 600) or math.min(viewport.Y * 0.6, 520);
    
    local scale = math.min(viewport.X / 1920, viewport.Y / 1080);
    local statHeight = math.max(30, 35 * scale);
    local buttonHeight = math.max(35, 45 * scale);
    local buttonWidth = math.max(150, 200 * scale);
    
    return {
        containerWidth = baseWidth,
        containerHeight = baseHeight,
        statHeight = statHeight,
        buttonHeight = buttonHeight,
        buttonWidth = buttonWidth,
        padding = math.max(15, 20 * scale),
        gap = math.max(3, 5 * scale),
        cornerRadius = math.max(8, 12 * scale)
    };
end;

local function CreateOverlay()
    if OverlayGui then OverlayGui:Destroy() end;
    
    local sizes = GetOptimalSizes();
    
    local url = 'https://raw.githubusercontent.com/AccountBurner/Utility/main/55279d991b8a4dcb35bcd36d26fb0cb9.png';
    local path = 'zekehub_cover.png';
    
    if not isfile(path) then
        writefile(path, game:HttpGet(url));
    end;
    local asset = getcustomasset(path);
    
    OverlayGui = Instance.new('ScreenGui');
    OverlayGui.IgnoreGuiInset = true;
    OverlayGui.ResetOnSpawn = false;
    OverlayGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling;
    OverlayGui.DisplayOrder = 10;
    OverlayGui.Parent = gethui and gethui() or game:GetService("CoreGui");
    
    local ImageLabel = Instance.new('ImageLabel', OverlayGui);
    ImageLabel.Size = UDim2.new(1, 0, 1, 0);
    ImageLabel.Position = UDim2.new(0, 0, 0, 0);
    ImageLabel.BackgroundTransparency = 1;
    ImageLabel.Image = asset;
    ImageLabel.ScaleType = Enum.ScaleType.Stretch;
    
    local DarkOverlay = Instance.new('Frame', OverlayGui);
    DarkOverlay.Size = UDim2.new(1, 0, 1, 0);
    DarkOverlay.BackgroundColor3 = Color3.new(0, 0, 0);
    DarkOverlay.BackgroundTransparency = 0.4;
    DarkOverlay.BorderSizePixel = 0;
    
    local Container = Instance.new('Frame', OverlayGui);
    Container.Size = UDim2.new(0, sizes.containerWidth, 0, sizes.containerHeight);
    Container.AnchorPoint = Vector2.new(0.5, 0.5);
    Container.Position = UDim2.new(0.5, 0, 0.5, 0);
    Container.BackgroundColor3 = Color3.new(0.05, 0.05, 0.05);
    Container.BackgroundTransparency = 0.05;
    Container.BorderSizePixel = 0;
    
    local UICorner = Instance.new('UICorner', Container);
    UICorner.CornerRadius = UDim.new(0, sizes.cornerRadius);
    
    local UIStroke = Instance.new('UIStroke', Container);
    UIStroke.Color = Color3.fromRGB(138, 43, 226);
    UIStroke.Thickness = 3;
    UIStroke.Transparency = 0.3;
    
    local Gradient = Instance.new('UIGradient', UIStroke);
    Gradient.Color = ColorSequence.new{
        ColorSequenceKeypoint.new(0, Color3.fromRGB(138, 43, 226)),
        ColorSequenceKeypoint.new(0.5, Color3.fromRGB(75, 0, 130)),
        ColorSequenceKeypoint.new(1, Color3.fromRGB(138, 43, 226))
    };
    
    local DiscordLabel = Instance.new('TextLabel', Container);
    DiscordLabel.Size = UDim2.new(1, -20, 0, 50);
    DiscordLabel.AnchorPoint = Vector2.new(0.5, 0);
    DiscordLabel.Position = UDim2.new(0.5, 0, 0, 10);
    DiscordLabel.BackgroundTransparency = 1;
    DiscordLabel.Text = 'discord.gg/zekehub';
    DiscordLabel.TextColor3 = Color3.new(1, 1, 1);
    DiscordLabel.TextScaled = true;
    DiscordLabel.Font = Enum.Font.SourceSansBold;
    
    local DiscordSizeConstraint = Instance.new('UITextSizeConstraint', DiscordLabel);
    DiscordSizeConstraint.MaxTextSize = 36;
    
    local DiscordStroke = Instance.new('UIStroke', DiscordLabel);
    DiscordStroke.Color = Color3.new(0, 0, 0);
    DiscordStroke.Thickness = 2;
    
    local StatsContainer = Instance.new('Frame', Container);
    StatsContainer.Size = UDim2.new(1, -sizes.padding * 2, 0, sizes.statHeight * 8 + sizes.gap * 7);
    StatsContainer.AnchorPoint = Vector2.new(0.5, 0);
    StatsContainer.Position = UDim2.new(0.5, 0, 0, 70);
    StatsContainer.BackgroundTransparency = 1;
    
    local UIListLayout = Instance.new('UIListLayout', StatsContainer);
    UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder;
    UIListLayout.Padding = UDim.new(0, sizes.gap);
    
    OverlayLabels = {};
    local statConfigs = {
        {name = 'Task', text = 'Current Task: None', icon = 'üìã'},
        {name = 'Bucks', text = 'Bucks: 0', icon = 'üí∞'},
        {name = 'Potions', text = 'Age Potions: 0', icon = 'üß™'},
        {name = 'Runtime', text = 'Runtime: 00:00', icon = '‚è±Ô∏è'},
        {name = 'Location', text = 'Location: Unknown', icon = 'üìç'},
        {name = 'EventCurrency', text = 'Event Currency: 0', icon = 'üéÉ'},
        {name = 'YarnApples', text = 'Yarn Apples: 0', icon = 'üß∂'},
        {name = 'CatBatProgress', text = 'Cat Bat: 0%', icon = 'ü¶á'}
    };
    
    for i, config in ipairs(statConfigs) do
        local statFrame = Instance.new('Frame', StatsContainer);
        statFrame.Size = UDim2.new(1, 0, 0, sizes.statHeight);
        statFrame.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1);
        statFrame.BackgroundTransparency = 0.7;
        statFrame.LayoutOrder = i;
        
        local statCorner = Instance.new('UICorner', statFrame);
        statCorner.CornerRadius = UDim.new(0, sizes.cornerRadius * 0.8);
        
        local label = Instance.new('TextLabel', statFrame);
        label.Size = UDim2.new(1, -10, 1, 0);
        label.Position = UDim2.new(0, 10, 0, 0);
        label.BackgroundTransparency = 1;
        label.Text = config.icon .. '  ' .. config.text;
        label.TextColor3 = Color3.new(0.95, 0.95, 0.95);
        label.TextScaled = true;
        label.Font = Enum.Font.SourceSans;
        label.TextXAlignment = Enum.TextXAlignment.Left;
        
        local TextSizeConstraint = Instance.new('UITextSizeConstraint', label);
        TextSizeConstraint.MaxTextSize = 20;
        
        OverlayLabels[config.name] = label;
    end;
    
    local ToggleButton = Instance.new('TextButton', Container);
    ToggleButton.Size = UDim2.new(0, sizes.buttonWidth, 0, sizes.buttonHeight);
    ToggleButton.AnchorPoint = Vector2.new(0.5, 1);
    ToggleButton.Position = UDim2.new(0.5, 0, 1, -15);
    ToggleButton.BackgroundColor3 = Color3.fromRGB(138, 43, 226);
    ToggleButton.Text = 'HIDE OVERLAY';
    ToggleButton.TextColor3 = Color3.new(1, 1, 1);
    ToggleButton.TextScaled = true;
    ToggleButton.Font = Enum.Font.SourceSansBold;
    
    local ButtonSizeConstraint = Instance.new('UITextSizeConstraint', ToggleButton);
    ButtonSizeConstraint.MaxTextSize = 18;
    
    local ButtonCorner = Instance.new('UICorner', ToggleButton);
    ButtonCorner.CornerRadius = UDim.new(0, sizes.cornerRadius);
    
    local ButtonStroke = Instance.new('UIStroke', ToggleButton);
    ButtonStroke.Color = Color3.new(0, 0, 0);
    ButtonStroke.Thickness = 2;
    ButtonStroke.Transparency = 0.5;
    
    local ShowButton = Instance.new('TextButton', OverlayGui);
    ShowButton.Size = UDim2.new(0, sizes.buttonWidth, 0, sizes.buttonHeight);
    ShowButton.AnchorPoint = Vector2.new(0.5, 1);
    ShowButton.Position = UDim2.new(0.5, 0, 1, -20);
    ShowButton.BackgroundColor3 = Color3.fromRGB(138, 43, 226);
    ShowButton.BackgroundTransparency = 0.6;
    ShowButton.Text = 'SHOW OVERLAY';
    ShowButton.TextColor3 = Color3.new(1, 1, 1);
    ShowButton.TextScaled = true;
    ShowButton.Font = Enum.Font.SourceSansBold;
    ShowButton.Visible = false;
    
    local ShowButtonSizeConstraint = Instance.new('UITextSizeConstraint', ShowButton);
    ShowButtonSizeConstraint.MaxTextSize = 18;
    
    local ShowButtonCorner = Instance.new('UICorner', ShowButton);
    ShowButtonCorner.CornerRadius = UDim.new(0, sizes.cornerRadius);
    
    local ShowButtonStroke = Instance.new('UIStroke', ShowButton);
    ShowButtonStroke.Color = Color3.new(0, 0, 0);
    ShowButtonStroke.Thickness = 2;
    ShowButtonStroke.Transparency = 0.7;
    
    OverlayMaid:AddTask(ToggleButton.MouseButton1Click:Connect(function()
        Container.Visible = false;
        DarkOverlay.Visible = false;
        ImageLabel.Visible = false;
        ShowButton.Visible = true;
        game:GetService("RunService"):Set3dRenderingEnabled(true);
    end), "3DRendering");
    
    OverlayMaid:AddTask(ShowButton.MouseButton1Click:Connect(function()
        Container.Visible = true;
        DarkOverlay.Visible = true;
        ImageLabel.Visible = true;
        ShowButton.Visible = false;
        game:GetService("RunService"):Set3dRenderingEnabled(false);
    end), "3DRendering");
    
    OverlayMaid:AddTask(ToggleButton.MouseEnter:Connect(function()
        game:GetService("TweenService"):Create(ToggleButton, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(75, 0, 130)
        }):Play();
    end), "3DRendering");
    
    OverlayMaid:AddTask(ToggleButton.MouseLeave:Connect(function()
        game:GetService("TweenService"):Create(ToggleButton, TweenInfo.new(0.2), {
            BackgroundColor3 = Color3.fromRGB(138, 43, 226)
        }):Play();
    end), "3DRendering");
    
    OverlayMaid:AddTask(Camera:GetPropertyChangedSignal("ViewportSize"):Connect(function()
        local newSizes = GetOptimalSizes();
        Container.Size = UDim2.new(0, newSizes.containerWidth, 0, newSizes.containerHeight);
        StatsContainer.Size = UDim2.new(1, -newSizes.padding * 2, 0, newSizes.statHeight * 8 + newSizes.gap * 7);
        UIListLayout.Padding = UDim.new(0, newSizes.gap);
        ToggleButton.Size = UDim2.new(0, newSizes.buttonWidth, 0, newSizes.buttonHeight);
        ShowButton.Size = UDim2.new(0, newSizes.buttonWidth, 0, newSizes.buttonHeight);
        UICorner.CornerRadius = UDim.new(0, newSizes.cornerRadius);
        ButtonCorner.CornerRadius = UDim.new(0, newSizes.cornerRadius);
        ShowButtonCorner.CornerRadius = UDim.new(0, newSizes.cornerRadius);
        
        for _, label in pairs(OverlayLabels) do
            label.Parent.Size = UDim2.new(1, 0, 0, newSizes.statHeight);
            label.Parent.UICorner.CornerRadius = UDim.new(0, newSizes.cornerRadius * 0.8);
        end;
    end), "3DRendering");
    
    return OverlayGui;
end;

function OverlaySystem.Toggle3DRendering(enabled)
    OverlayMaid:Cleanup("3DRendering");
    if enabled then
        CreateOverlay();
        
        task.wait(0.1);
        game:GetService("RunService"):Set3dRenderingEnabled(false);
        
        if OverlayGui then
            OverlayMaid:AddTask(function()
                if OverlayGui then
                    OverlayGui:Destroy();
                    OverlayGui = nil;
                end;
                game:GetService("RunService"):Set3dRenderingEnabled(true);
            end, "3DRendering");
        end;
    else
        if OverlayGui then
            OverlayGui:Destroy();
            OverlayGui = nil;
        end;
        game:GetService("RunService"):Set3dRenderingEnabled(true);
    end;
end;

function OverlaySystem.UpdateStats(data)
    if not OverlayGui then return end;
    
    if data.task and OverlayLabels.Task then
        OverlayLabels.Task.Text = 'üìã  Current Task: ' .. data.task;
    end;
    if data.bucks and OverlayLabels.Bucks then
        OverlayLabels.Bucks.Text = 'üí∞  Bucks: ' .. tostring(data.bucks);
    end;
    if data.potions and OverlayLabels.Potions then
        OverlayLabels.Potions.Text = 'üß™  Age Potions: ' .. tostring(data.potions);
    end;
    if data.runtime and OverlayLabels.Runtime then
        OverlayLabels.Runtime.Text = '‚è±Ô∏è  Runtime: ' .. data.runtime;
    end;
    if data.location and OverlayLabels.Location then
        OverlayLabels.Location.Text = 'üìç  Location: ' .. data.location;
    end;
    if data.eventCurrency and OverlayLabels.EventCurrency then
        OverlayLabels.EventCurrency.Text = 'üéÉ  Event Currency: ' .. tostring(data.eventCurrency);
    end;
    if data.yarnApples and OverlayLabels.YarnApples then
        OverlayLabels.YarnApples.Text = 'üß∂  Yarn Apples: ' .. tostring(data.yarnApples);
    end;
    if data.catBatProgress and OverlayLabels.CatBatProgress then
        OverlayLabels.CatBatProgress.Text = 'ü¶á  Cat Bat: ' .. math.floor(data.catBatProgress) .. '%';
    end;
end;

function OverlaySystem.Destroy()
    OverlayMaid:Cleanup();
    if OverlayGui then
        OverlayGui:Destroy();
        OverlayGui = nil;
    end;
end;

return OverlaySystem;
